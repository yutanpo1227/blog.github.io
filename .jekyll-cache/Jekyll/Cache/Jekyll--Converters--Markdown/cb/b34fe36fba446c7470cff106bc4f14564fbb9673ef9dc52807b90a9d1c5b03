I"l"<p><img src="/blog.github.io/post-img/category1/unitV/unitV.jpeg" alt="UnitV" /></p>

<h1 id="maixpy-ideでの開発">MaixPy IDEでの開発</h1>
<p>こちらからMaixPyをダウンロードしました。
http://dl.sipeed.com/shareURL/MAIX/MaixPy/ide/v0.2.5
まずは手順に乗っ取り、Helloworld.pyを実行したところ問題なく実行することができました。</p>
<h1 id="とりあえず処理を書いてみる">とりあえず処理を書いてみる</h1>
<p>Micro Pythonでの画像処理は以前OpenMVで行っていてほとんど環境も変わっていないため、問題なくプログラムを書けそうです。とりあえず今回は初回なのでAI要素は使わず、シンプルに色検出を行ってみました。</p>
<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="nx">sensor</span><span class="p">,</span> <span class="nx">image</span><span class="p">,</span> <span class="nx">time</span><span class="p">,</span><span class="nx">ustruct</span>

<span class="nx">thresholds</span> <span class="o">=</span> <span class="p">[</span>
<span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">100</span><span class="p">,</span> <span class="o">-</span><span class="mi">128</span><span class="p">,</span> <span class="o">-</span><span class="mi">30</span><span class="p">,</span> <span class="o">-</span><span class="mi">128</span><span class="p">,</span> <span class="mi">127</span><span class="p">)</span>  <span class="err">#</span><span class="nx">検出する色の閾値</span><span class="err">（</span><span class="nx">LAB空間</span><span class="err">）</span>
<span class="p">]</span>

<span class="nx">sensor</span><span class="p">.</span><span class="nx">reset</span><span class="p">()</span>  <span class="err">#</span><span class="nx">センサーの設定</span>
<span class="nx">sensor</span><span class="p">.</span><span class="nx">set_pixformat</span><span class="p">(</span><span class="nx">sensor</span><span class="p">.</span><span class="nx">RGB565</span><span class="p">)</span>
<span class="nx">sensor</span><span class="p">.</span><span class="nx">set_framesize</span><span class="p">(</span><span class="nx">sensor</span><span class="p">.</span><span class="nx">QVGA</span><span class="p">)</span>
<span class="nx">sensor</span><span class="p">.</span><span class="nx">set_brightness</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span>
<span class="nx">sensor</span><span class="p">.</span><span class="nx">skip_frames</span><span class="p">(</span><span class="mi">30</span><span class="p">)</span>
<span class="nx">sensor</span><span class="p">.</span><span class="nx">set_auto_gain</span><span class="p">(</span><span class="nx">False</span><span class="p">)</span>

<span class="nx">maxrect</span> <span class="o">=</span> <span class="mi">0</span>
<span class="nx">x_data</span> <span class="o">=</span> <span class="mi">0</span>
<span class="nx">y_data</span> <span class="o">=</span> <span class="mi">0</span>

<span class="k">while</span><span class="p">(</span><span class="nx">True</span><span class="p">):</span>
        <span class="nx">rectarray</span> <span class="o">=</span> <span class="p">[]</span>
        <span class="nx">img</span> <span class="o">=</span> <span class="nx">sensor</span><span class="p">.</span><span class="nx">snapshot</span><span class="p">()</span> <span class="err">#</span><span class="nx">センサーから画像を取得</span>

        <span class="k">for</span> <span class="nx">blob</span> <span class="k">in</span> <span class="nx">img</span><span class="p">.</span><span class="nx">find_blobs</span><span class="p">(</span><span class="nx">thresholds</span><span class="p">,</span> <span class="nx">pixel_threshold</span> <span class="o">=</span> <span class="mi">100</span><span class="p">,</span> <span class="nx">area_threshold</span> <span class="o">=</span> <span class="mi">100</span><span class="p">,</span> <span class="nx">merge</span> <span class="o">=</span> <span class="nx">True</span><span class="p">,</span> <span class="nx">margin</span> <span class="o">=</span> <span class="mi">5</span><span class="p">):</span>
            <span class="nx">rectarray</span><span class="p">.</span><span class="nx">append</span><span class="p">(</span><span class="nx">list</span><span class="p">(</span><span class="nx">blob</span><span class="p">.</span><span class="nx">rect</span><span class="p">()))</span>     <span class="err">#</span><span class="nx">見つかった閾値内のオブジェクトをリストに格納</span>

        <span class="k">try</span><span class="p">:</span>
            <span class="nx">maxrect</span> <span class="o">=</span> <span class="nx">max</span><span class="p">(</span><span class="nx">rectarray</span><span class="p">,</span><span class="nx">key</span><span class="o">=</span><span class="nx">lambda</span> <span class="nx">x</span><span class="p">:</span> <span class="nx">x</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span><span class="o">*</span><span class="nx">x</span><span class="p">[</span><span class="mi">3</span><span class="p">])</span>    <span class="err">#</span><span class="nx">配列の中から面積の一番大きい物を選定</span>
            <span class="nx">img</span><span class="p">.</span><span class="nx">draw_rectangle</span><span class="p">(</span><span class="nx">maxrect</span><span class="p">)</span>     <span class="err">#</span><span class="nx">オブジェクトを囲う四角形の描画</span>
            <span class="nx">x_data</span> <span class="o">=</span> <span class="nx">maxrect</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">+</span><span class="p">(</span><span class="nx">maxrect</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span><span class="o">/</span><span class="mi">2</span><span class="p">)</span>  <span class="err">#</span><span class="nx">中心のx座標の算出</span>
            <span class="nx">y_data</span> <span class="o">=</span> <span class="nx">maxrect</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">+</span><span class="p">(</span><span class="nx">maxrect</span><span class="p">[</span><span class="mi">3</span><span class="p">]</span><span class="o">/</span><span class="mi">2</span><span class="p">)</span>  <span class="err">#</span><span class="nx">中心のy座標の算出</span>

        <span class="nx">except</span> <span class="nx">ValueError</span> <span class="k">as</span> <span class="nx">err</span><span class="p">:</span>   <span class="err">#</span><span class="nx">オブジェクトがひとつも見つからなかった場合の例外処理</span>
            <span class="nx">pass</span>

        <span class="nx">x</span> <span class="o">=</span> <span class="nx">int</span><span class="p">((</span><span class="nx">x_data</span> <span class="o">/</span> <span class="mi">320</span><span class="p">)</span> <span class="o">*</span> <span class="mf">70.8</span><span class="p">)</span>  <span class="err">#</span><span class="nx">視野角に合わせた座標の変換</span>
        <span class="nx">y</span> <span class="o">=</span> <span class="nx">int</span><span class="p">(((</span><span class="nx">y_data</span> <span class="o">-</span> <span class="mi">240</span><span class="p">)</span> <span class="o">/</span> <span class="o">-</span><span class="mi">240</span><span class="p">)</span> <span class="o">*</span> <span class="mf">55.6</span><span class="p">)</span>

        <span class="nx">print</span><span class="p">(</span><span class="dl">"</span><span class="s2">x = </span><span class="dl">"</span><span class="p">,</span><span class="nx">x</span><span class="p">,</span><span class="dl">"</span><span class="s2">   y = </span><span class="dl">"</span><span class="p">,</span><span class="nx">y</span><span class="p">)</span>
</code></pre></div></div>
<p>指定した色閾値内の物体を探し一番面積の大きいものを抽出するというシンプルな物です。
<img src="/blog.github.io/post-img/category1/unitV/unitVprog.png" alt="" /></p>

<p>今回はおーいお茶のキャップを使用しました。ちゃんとキャップを囲う四角形が描画され中心座標がシリアルに出力されました。</p>
<h1 id="次回以降について">次回以降について</h1>
<p>とりあえずカメラとして使用することはできたので次回以降M5Stackとの通信やAI機能を用いた物体認識などをやっていこうと思います。</p>
:ET